package leetcode.sword.finger.offer;

import org.junit.Assert;
import org.junit.Test;

/**
 * 面试题15. 二进制中1的个数
 * 请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。
 * <p>
 * 示例 1：
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * <p>
 * 示例 2：
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * <p>
 * 示例 3：
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 */
public class MS15 {
    @Test
    public void test1() {
        MS15 ms15 = new MS15();
        Assert.assertEquals( 3, ms15.hammingWeight( 0b00000000000000000000000000001011 ) );
        Assert.assertEquals( 3, ms15.hammingWeight2( 0b00000000000000000000000000001011 ) );
        Assert.assertEquals( 3, ms15.hammingWeigh3( 0b00000000000000000000000000001011 ) );
    }
    
    /**
     * java中的移位运算符
     * <p>
     * <<      :     左移运算符，num << 1,相当于num乘以2
     * >>      :     右移运算符，num >> 1,相当于num除以2
     * >>>    :     无符号右移，忽略符号位，空位都以0补齐
     *
     * @param n
     * @return
     */
    // you need to treat n as an unsigned value
    public int hammingWeight( int n ) {
        int counter = 0;
        int a = 1;
        
        while (a != 0) {
            // System.out.println( "a=" + a + " , n&a = " + ( n & a ) );
            if (( n & a ) != 0) {
                counter++;
            }
            a = a << 1;
        }
        // System.out.println( "a=" + a + " , n&a = " + ( n & a ) );
        return counter;
    }
    
    /**
     * >>>    :     无符号右移，忽略符号位，空位都以0补齐
     *
     * 使用>>对于负数，右移一位左边会补一个1，可能会陷入死循环
     *
     * @param n
     * @return
     */
    public int hammingWeight2( int n ) {
        int counter = 0;
        
        while (n != 0) {
            
            // System.out.println( "n=" + n + " , (n&1)=" + ( n & 1 ) + " , (n >>> 1)=" + ( n >>> 1 ) );
            // System.out.println( "n=" + Integer.toBinaryString( n ) + " , (n&1)=" + Integer.toBinaryString( ( n & 1
            // ) ) +
            //                             " , (n >>> 1)=" + Integer.toBinaryString( ( n >>> 1 ) ) );
            if (( n & 1 ) == 1) {
                ++counter;
            }
            n = n >>> 1;
        }
        
        return counter;
    }
    
    /**
     * (n−1)   ： 二进制数字 n 最右边的 1 变成 0 ，此 1 右边的 0 都变成 1 。
     * n&(n−1) ： 二进制数字 n 最右边的 1 变成 0 ，其余不变。
     *
     * @param n
     * @return
     */
    public int hammingWeigh3( int n ) {
        int counter = 0;
        while (n != 0) {
            ++counter;
            n = n & ( n - 1 );
            System.out.println( "n=" + n + " , n-1=" + ( n - 1 ) + " ,n&(n-1)=" + ( n & ( n - 1 ) ) );
            System.out.println( "n=" + Integer.toBinaryString( n ) + " , n-1=" + Integer.toBinaryString( ( n - 1 ) ) + " " +
                                        ",n&(n-1)=" + Integer.toBinaryString( ( n & ( n - 1 ) ) ) );
        }
        return counter;
    }
    
    
    @Test
    public void test2() {
        MS15 ms15 = new MS15();
        Assert.assertEquals( 1, ms15.hammingWeight( 0b00000000000000000000000010000000 ) );
        Assert.assertEquals( 1, ms15.hammingWeight2( 0b00000000000000000000000010000000 ) );
        Assert.assertEquals( 1, ms15.hammingWeigh3( 0b00000000000000000000000010000000 ) );
    }
    
    
    @Test
    public void test3() {
        MS15 ms15 = new MS15();
        /**
         * a=1 , n&a = 1
         * a=2 , n&a = 0
         * a=4 , n&a = 4
         * a=8 , n&a = 8
         * a=16 , n&a = 16
         * a=32 , n&a = 32
         * a=64 , n&a = 64
         * a=128 , n&a = 128
         * a=256 , n&a = 256
         * a=512 , n&a = 512
         * a=1024 , n&a = 1024
         * a=2048 , n&a = 2048
         * a=4096 , n&a = 4096
         * a=8192 , n&a = 8192
         * a=16384 , n&a = 16384
         * a=32768 , n&a = 32768
         * a=65536 , n&a = 65536
         * a=131072 , n&a = 131072
         * a=262144 , n&a = 262144
         * a=524288 , n&a = 524288
         * a=1048576 , n&a = 1048576
         * a=2097152 , n&a = 2097152
         * a=4194304 , n&a = 4194304
         * a=8388608 , n&a = 8388608
         * a=16777216 , n&a = 16777216
         * a=33554432 , n&a = 33554432
         * a=67108864 , n&a = 67108864
         * a=134217728 , n&a = 134217728
         * a=268435456 , n&a = 268435456
         * a=536870912 , n&a = 536870912
         * a=1073741824 , n&a = 1073741824
         * a=-2147483648 , n&a = -2147483648
         * a=0 , n&a = 0
         *
         * Process finished with exit code 0
         */
        Assert.assertEquals( 31, ms15.hammingWeight( 0b11111111111111111111111111111101 ) );
        
        /**
         * n=-3 , (n&1)=1 , (n >>> 1)=2147483646
         * n=11111111111111111111111111111101 , (n&1)=1 , (n >>> 1)=1111111111111111111111111111110
         * n=2147483646 , (n&1)=0 , (n >>> 1)=1073741823
         * n=1111111111111111111111111111110 , (n&1)=0 , (n >>> 1)=111111111111111111111111111111
         * n=1073741823 , (n&1)=1 , (n >>> 1)=536870911
         * n=111111111111111111111111111111 , (n&1)=1 , (n >>> 1)=11111111111111111111111111111
         * n=536870911 , (n&1)=1 , (n >>> 1)=268435455
         * n=11111111111111111111111111111 , (n&1)=1 , (n >>> 1)=1111111111111111111111111111
         * n=268435455 , (n&1)=1 , (n >>> 1)=134217727
         * n=1111111111111111111111111111 , (n&1)=1 , (n >>> 1)=111111111111111111111111111
         * n=134217727 , (n&1)=1 , (n >>> 1)=67108863
         * n=111111111111111111111111111 , (n&1)=1 , (n >>> 1)=11111111111111111111111111
         * n=67108863 , (n&1)=1 , (n >>> 1)=33554431
         * n=11111111111111111111111111 , (n&1)=1 , (n >>> 1)=1111111111111111111111111
         * n=33554431 , (n&1)=1 , (n >>> 1)=16777215
         * n=1111111111111111111111111 , (n&1)=1 , (n >>> 1)=111111111111111111111111
         * n=16777215 , (n&1)=1 , (n >>> 1)=8388607
         * n=111111111111111111111111 , (n&1)=1 , (n >>> 1)=11111111111111111111111
         * n=8388607 , (n&1)=1 , (n >>> 1)=4194303
         * n=11111111111111111111111 , (n&1)=1 , (n >>> 1)=1111111111111111111111
         * n=4194303 , (n&1)=1 , (n >>> 1)=2097151
         * n=1111111111111111111111 , (n&1)=1 , (n >>> 1)=111111111111111111111
         * n=2097151 , (n&1)=1 , (n >>> 1)=1048575
         * n=111111111111111111111 , (n&1)=1 , (n >>> 1)=11111111111111111111
         * n=1048575 , (n&1)=1 , (n >>> 1)=524287
         * n=11111111111111111111 , (n&1)=1 , (n >>> 1)=1111111111111111111
         * n=524287 , (n&1)=1 , (n >>> 1)=262143
         * n=1111111111111111111 , (n&1)=1 , (n >>> 1)=111111111111111111
         * n=262143 , (n&1)=1 , (n >>> 1)=131071
         * n=111111111111111111 , (n&1)=1 , (n >>> 1)=11111111111111111
         * n=131071 , (n&1)=1 , (n >>> 1)=65535
         * n=11111111111111111 , (n&1)=1 , (n >>> 1)=1111111111111111
         * n=65535 , (n&1)=1 , (n >>> 1)=32767
         * n=1111111111111111 , (n&1)=1 , (n >>> 1)=111111111111111
         * n=32767 , (n&1)=1 , (n >>> 1)=16383
         * n=111111111111111 , (n&1)=1 , (n >>> 1)=11111111111111
         * n=16383 , (n&1)=1 , (n >>> 1)=8191
         * n=11111111111111 , (n&1)=1 , (n >>> 1)=1111111111111
         * n=8191 , (n&1)=1 , (n >>> 1)=4095
         * n=1111111111111 , (n&1)=1 , (n >>> 1)=111111111111
         * n=4095 , (n&1)=1 , (n >>> 1)=2047
         * n=111111111111 , (n&1)=1 , (n >>> 1)=11111111111
         * n=2047 , (n&1)=1 , (n >>> 1)=1023
         * n=11111111111 , (n&1)=1 , (n >>> 1)=1111111111
         * n=1023 , (n&1)=1 , (n >>> 1)=511
         * n=1111111111 , (n&1)=1 , (n >>> 1)=111111111
         * n=511 , (n&1)=1 , (n >>> 1)=255
         * n=111111111 , (n&1)=1 , (n >>> 1)=11111111
         * n=255 , (n&1)=1 , (n >>> 1)=127
         * n=11111111 , (n&1)=1 , (n >>> 1)=1111111
         * n=127 , (n&1)=1 , (n >>> 1)=63
         * n=1111111 , (n&1)=1 , (n >>> 1)=111111
         * n=63 , (n&1)=1 , (n >>> 1)=31
         * n=111111 , (n&1)=1 , (n >>> 1)=11111
         * n=31 , (n&1)=1 , (n >>> 1)=15
         * n=11111 , (n&1)=1 , (n >>> 1)=1111
         * n=15 , (n&1)=1 , (n >>> 1)=7
         * n=1111 , (n&1)=1 , (n >>> 1)=111
         * n=7 , (n&1)=1 , (n >>> 1)=3
         * n=111 , (n&1)=1 , (n >>> 1)=11
         * n=3 , (n&1)=1 , (n >>> 1)=1
         * n=11 , (n&1)=1 , (n >>> 1)=1
         * n=1 , (n&1)=1 , (n >>> 1)=0
         * n=1 , (n&1)=1 , (n >>> 1)=0
         */
        Assert.assertEquals( 31, ms15.hammingWeight2( 0b11111111111111111111111111111101 ) );
        
        // n=-4 , n-1=-5 ,n&(n-1)=-8
        // n=11111111111111111111111111111100 , n-1=11111111111111111111111111111011 ,n&(n-1)=11111111111111111111111111111000
        // n=-8 , n-1=-9 ,n&(n-1)=-16
        // n=11111111111111111111111111111000 , n-1=11111111111111111111111111110111 ,n&(n-1)=11111111111111111111111111110000
        // n=-16 , n-1=-17 ,n&(n-1)=-32
        // n=11111111111111111111111111110000 , n-1=11111111111111111111111111101111 ,n&(n-1)=11111111111111111111111111100000
        // n=-32 , n-1=-33 ,n&(n-1)=-64
        // n=11111111111111111111111111100000 , n-1=11111111111111111111111111011111 ,n&(n-1)=11111111111111111111111111000000
        // n=-64 , n-1=-65 ,n&(n-1)=-128
        // n=11111111111111111111111111000000 , n-1=11111111111111111111111110111111 ,n&(n-1)=11111111111111111111111110000000
        // n=-128 , n-1=-129 ,n&(n-1)=-256
        // n=11111111111111111111111110000000 , n-1=11111111111111111111111101111111 ,n&(n-1)=11111111111111111111111100000000
        // n=-256 , n-1=-257 ,n&(n-1)=-512
        // n=11111111111111111111111100000000 , n-1=11111111111111111111111011111111 ,n&(n-1)=11111111111111111111111000000000
        // n=-512 , n-1=-513 ,n&(n-1)=-1024
        // n=11111111111111111111111000000000 , n-1=11111111111111111111110111111111 ,n&(n-1)=11111111111111111111110000000000
        // n=-1024 , n-1=-1025 ,n&(n-1)=-2048
        // n=11111111111111111111110000000000 , n-1=11111111111111111111101111111111 ,n&(n-1)=11111111111111111111100000000000
        // n=-2048 , n-1=-2049 ,n&(n-1)=-4096
        // n=11111111111111111111100000000000 , n-1=11111111111111111111011111111111 ,n&(n-1)=11111111111111111111000000000000
        // n=-4096 , n-1=-4097 ,n&(n-1)=-8192
        // n=11111111111111111111000000000000 , n-1=11111111111111111110111111111111 ,n&(n-1)=11111111111111111110000000000000
        // n=-8192 , n-1=-8193 ,n&(n-1)=-16384
        // n=11111111111111111110000000000000 , n-1=11111111111111111101111111111111 ,n&(n-1)=11111111111111111100000000000000
        // n=-16384 , n-1=-16385 ,n&(n-1)=-32768
        // n=11111111111111111100000000000000 , n-1=11111111111111111011111111111111 ,n&(n-1)=11111111111111111000000000000000
        // n=-32768 , n-1=-32769 ,n&(n-1)=-65536
        // n=11111111111111111000000000000000 , n-1=11111111111111110111111111111111 ,n&(n-1)=11111111111111110000000000000000
        // n=-65536 , n-1=-65537 ,n&(n-1)=-131072
        // n=11111111111111110000000000000000 , n-1=11111111111111101111111111111111 ,n&(n-1)=11111111111111100000000000000000
        // n=-131072 , n-1=-131073 ,n&(n-1)=-262144
        // n=11111111111111100000000000000000 , n-1=11111111111111011111111111111111 ,n&(n-1)=11111111111111000000000000000000
        // n=-262144 , n-1=-262145 ,n&(n-1)=-524288
        // n=11111111111111000000000000000000 , n-1=11111111111110111111111111111111 ,n&(n-1)=11111111111110000000000000000000
        // n=-524288 , n-1=-524289 ,n&(n-1)=-1048576
        // n=11111111111110000000000000000000 , n-1=11111111111101111111111111111111 ,n&(n-1)=11111111111100000000000000000000
        // n=-1048576 , n-1=-1048577 ,n&(n-1)=-2097152
        // n=11111111111100000000000000000000 , n-1=11111111111011111111111111111111 ,n&(n-1)=11111111111000000000000000000000
        // n=-2097152 , n-1=-2097153 ,n&(n-1)=-4194304
        // n=11111111111000000000000000000000 , n-1=11111111110111111111111111111111 ,n&(n-1)=11111111110000000000000000000000
        // n=-4194304 , n-1=-4194305 ,n&(n-1)=-8388608
        // n=11111111110000000000000000000000 , n-1=11111111101111111111111111111111 ,n&(n-1)=11111111100000000000000000000000
        // n=-8388608 , n-1=-8388609 ,n&(n-1)=-16777216
        // n=11111111100000000000000000000000 , n-1=11111111011111111111111111111111 ,n&(n-1)=11111111000000000000000000000000
        // n=-16777216 , n-1=-16777217 ,n&(n-1)=-33554432
        // n=11111111000000000000000000000000 , n-1=11111110111111111111111111111111 ,n&(n-1)=11111110000000000000000000000000
        // n=-33554432 , n-1=-33554433 ,n&(n-1)=-67108864
        // n=11111110000000000000000000000000 , n-1=11111101111111111111111111111111 ,n&(n-1)=11111100000000000000000000000000
        // n=-67108864 , n-1=-67108865 ,n&(n-1)=-134217728
        // n=11111100000000000000000000000000 , n-1=11111011111111111111111111111111 ,n&(n-1)=11111000000000000000000000000000
        // n=-134217728 , n-1=-134217729 ,n&(n-1)=-268435456
        // n=11111000000000000000000000000000 , n-1=11110111111111111111111111111111 ,n&(n-1)=11110000000000000000000000000000
        // n=-268435456 , n-1=-268435457 ,n&(n-1)=-536870912
        // n=11110000000000000000000000000000 , n-1=11101111111111111111111111111111 ,n&(n-1)=11100000000000000000000000000000
        // n=-536870912 , n-1=-536870913 ,n&(n-1)=-1073741824
        // n=11100000000000000000000000000000 , n-1=11011111111111111111111111111111 ,n&(n-1)=11000000000000000000000000000000
        // n=-1073741824 , n-1=-1073741825 ,n&(n-1)=-2147483648
        // n=11000000000000000000000000000000 , n-1=10111111111111111111111111111111 ,n&(n-1)=10000000000000000000000000000000
        // n=-2147483648 , n-1=2147483647 ,n&(n-1)=0
        // n=10000000000000000000000000000000 , n-1=1111111111111111111111111111111 ,n&(n-1)=0
        // n=0 , n-1=-1 ,n&(n-1)=0
        // n=0 , n-1=11111111111111111111111111111111 ,n&(n-1)=0
        Assert.assertEquals( 31, ms15.hammingWeigh3( 0b11111111111111111111111111111101 ) );
    }
}
