package leetcode.Hot100;

import org.junit.Assert;
import org.junit.Test;

/**
 * 11. 盛最多水的容器
 * 给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为
 * (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
 *
 * 说明：你不能倾斜容器，且 n 的值至少为 2。
 *
 * 示例：
 *
 * 输入：[1,8,6,2,5,4,8,3,7]
 * 输出：49
 */
public class H11 {
    @Test
    public void test1() {
        H11 h11 = new H11();
        Assert.assertEquals( 49, h11.maxArea( new int[]{1, 8, 6, 2, 5, 4, 8, 3, 7} ) );
    }
    
    //                 $
    //                 $
    //                 $>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>@
    //                 $                                     @
    //                 $=====================================@=====================#
    //                 $                                     @                     #
    //                 $                                     @                     #
    //  #--------------$-------------------------------------@---------------------#
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  #              $                                     @                     #
    //  ############################################################################
    //
    //  第一步： #   -
    //  第二步： $   =
    //  第三步： @   >
    //
    //  由于每次向内移动指针，矩阵的长度变小，面积要增加必须怎大高度。如果继续向内移动较大的一边，长度一定缩小，并且由于容器实际有效高度取决于最低的一边，
    //  所以高度也不会增加，面积也不会增加。只有向内移动较小的一边，才有可能怎大容器的有效高度，从而增大容量。
    
    /**
     * https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/
     *
     * 方法一：双指针
     *
     * 说明：
     * 本题是一道经典的面试题，最优的做法是使用「双指针」。如果读者第一次看到这题，不一定能想出双指针的做法。
     *
     * [1, 8, 6, 2, 5, 4, 8, 3, 7]
     *  ^                       ^
     * 在初始时，左右指针分别指向数组的左右两端，它们可以容纳的水量为 min(1,7)∗8=8。
     * 此时我们需要移动一个指针。移动哪一个呢？直觉告诉我们，应该移动对应数字较小的那个指针（即此时的左指针）。这是因为，由于容纳的水量是由
     * 两个指针指向的数字中较小值 * 指针之间的距离决定的。如果我们移动数字较大的那个指针，那么前者「两个指针指向的数字中较小值」不会增加，
     * 后者「指针之间的距离」会减小，那么这个乘积会减小。因此，我们移动数字较大的那个指针是不合理的。因此，我们移动 数字较小的那个指针。
     *
     * @param height
     * @return
     */
    public int maxArea( int[] height ) {
        if (height == null || height.length == 0) {
            return 0;
        }
        
        int L = 0, R = height.length - 1;
        int maxArea = 0;
        while (L < R) {
            int area = Math.min( height[L], height[R] ) * ( R - L );
            if (area > maxArea) {
                maxArea = area;
            }
            
            if (height[L] < height[R]) {
                L++;
            } else {
                --R;
            }
            
        }
        
        return maxArea;
    }
}
